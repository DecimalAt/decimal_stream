/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface JobManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ATTESTATION_VERIFIER"
      | "PAYMENT_TOKEN"
      | "createJob"
      | "executeJob"
      | "exeuctionData"
      | "jobCounter"
      | "jobList"
      | "paymentCallback"
      | "validatorToJobId",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CreateJob" | "ExecutionComplete",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ATTESTATION_VERIFIER",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_TOKEN",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [BytesLike, AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "executeJob",
    values: [BigNumberish, BytesLike, BytesLike, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "exeuctionData",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "jobCounter",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "jobList",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "paymentCallback",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "validatorToJobId",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "ATTESTATION_VERIFIER",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_TOKEN",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exeuctionData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "jobCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentCallback",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorToJobId",
    data: BytesLike,
  ): Result;
}

export namespace CreateJobEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    validator: AddressLike,
    extractor: AddressLike,
  ];
  export type OutputTuple = [
    jobId: bigint,
    validator: string,
    extractor: string,
  ];
  export interface OutputObject {
    jobId: bigint;
    validator: string;
    extractor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionCompleteEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    executionId: BigNumberish,
    executor: AddressLike,
  ];
  export type OutputTuple = [
    jobId: bigint,
    executionId: bigint,
    executor: string,
  ];
  export interface OutputObject {
    jobId: bigint;
    executionId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobManager extends BaseContract {
  connect(runner?: ContractRunner | null): JobManager;
  waitForDeployment(): Promise<this>;

  interface: JobManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  ATTESTATION_VERIFIER: TypedContractMethod<[], [string], "view">;

  PAYMENT_TOKEN: TypedContractMethod<[], [string], "view">;

  createJob: TypedContractMethod<
    [_imageId: BytesLike, _validator: AddressLike, _extractor: AddressLike],
    [void],
    "nonpayable"
  >;

  executeJob: TypedContractMethod<
    [
      jobId: BigNumberish,
      jobData: BytesLike,
      attestationData: BytesLike,
      receiver: AddressLike,
      signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  exeuctionData: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  jobCounter: TypedContractMethod<[], [bigint], "view">;

  jobList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint] & {
        creator: string;
        imageId: string;
        validator: string;
        extractor: string;
        totalExecutions: bigint;
        totalEscrow: bigint;
      },
    ],
    "view"
  >;

  paymentCallback: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  validatorToJobId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "ATTESTATION_VERIFIER",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAYMENT_TOKEN",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createJob",
  ): TypedContractMethod<
    [_imageId: BytesLike, _validator: AddressLike, _extractor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeJob",
  ): TypedContractMethod<
    [
      jobId: BigNumberish,
      jobData: BytesLike,
      attestationData: BytesLike,
      receiver: AddressLike,
      signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exeuctionData",
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobCounter",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "jobList"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint] & {
        creator: string;
        imageId: string;
        validator: string;
        extractor: string;
        totalExecutions: bigint;
        totalEscrow: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "paymentCallback",
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorToJobId",
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "CreateJob",
  ): TypedContractEvent<
    CreateJobEvent.InputTuple,
    CreateJobEvent.OutputTuple,
    CreateJobEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionComplete",
  ): TypedContractEvent<
    ExecutionCompleteEvent.InputTuple,
    ExecutionCompleteEvent.OutputTuple,
    ExecutionCompleteEvent.OutputObject
  >;

  filters: {
    "CreateJob(uint256,address,address)": TypedContractEvent<
      CreateJobEvent.InputTuple,
      CreateJobEvent.OutputTuple,
      CreateJobEvent.OutputObject
    >;
    CreateJob: TypedContractEvent<
      CreateJobEvent.InputTuple,
      CreateJobEvent.OutputTuple,
      CreateJobEvent.OutputObject
    >;

    "ExecutionComplete(uint256,uint256,address)": TypedContractEvent<
      ExecutionCompleteEvent.InputTuple,
      ExecutionCompleteEvent.OutputTuple,
      ExecutionCompleteEvent.OutputObject
    >;
    ExecutionComplete: TypedContractEvent<
      ExecutionCompleteEvent.InputTuple,
      ExecutionCompleteEvent.OutputTuple,
      ExecutionCompleteEvent.OutputObject
    >;
  };
}
